"""
Copyright start
MIT License
Copyright (c) 2024 Fortinet Inc
Copyright end
"""

from ..make_rest_api_call import MakeRestApiCall


STATS_URL = {
    "Data Source Distribution": "data_source_distribution",
    "Data Source Trend": "data_source_trend",
    "Score Trend": "score-trend"
}

URL = {
    "ACI Reporting": "aci_reporting",
    "Darknet Chatter": "darknet_chatter",
    "Working Exploits": "working_exploit",
    "POC Exploits": "poc_exploit",
    "Security Blogs": "security_blogs",
    "Hacktivist Chatter": "hacktivist_chatter",
    "Social Media": "social_media"
}


INPUT_SRC_TYPE_MAPPING = {
    "CLIENT": "client",
    "ACI": "aci"
}

SORTING_OPTION_PRODUCT_MAPPING = {
    "Sort By Product Count Descending Order": "count:desc",
    "Sort By Product Count Ascending Order": "count:asc"
}

SORTING_OPTION_VENDOR_MAPPING = {
    "Sort By Vendor Count Descending Order": "count:desc",
    "Sort By Vendor Count Ascending Order": "count:asc"
}

def get_vulnerability_intelligence_hits_by_cve_id(config: dict, params: dict) -> dict:
    MK = MakeRestApiCall(config=config)
    endpoint = '/aci/{org_id}/vulnerability_intelligence/cves'+'/{id}/hits/{url}'.format(url=URL.get(params.get('based_on')), id=params.pop('id'))

    response = MK.make_request(endpoint=endpoint, method="GET", params=params)
    return response


def get_vulnerability_intelligence_stats_for_cve_id(config: dict, params: dict) -> dict:
    MK = MakeRestApiCall(config=config)
    endpoint = '/aci/{org_id}/stats/vulnerability_intelligence/cves'+'/{id}/{url}'.format(url=STATS_URL.get(params.get('based_on')), id=params.pop('id'))

    response = MK.make_request(endpoint=endpoint, method="GET", params=params)
    return response


def get_vulnerability_intelligence_cves(config: dict, params: dict) -> dict:
    MK = MakeRestApiCall(config=config)
    endpoint = '/aci/{org_id}/vulnerability_intelligence/cves'
    if params.get('cve_year'):
        params["cve_year"] = str(params.get('cve_year')).strip('[]')
    if params.get("start_date"):
        params["start_date"] = MK.handle_date(params.get("start_date"))
    if params.get("end_date"):
        params["end_date"] = MK.handle_date(params.get("end_date"))
    input_src_type = params.get("input_src_type")
    if input_src_type:
        params["input_src_type"] = INPUT_SRC_TYPE_MAPPING.get(input_src_type)
    response = MK.make_request(endpoint=endpoint, method="GET", params=params)
    return response


def get_vulnerability_intelligence_cves_by_id(config: dict, params: dict) -> dict:
    MK = MakeRestApiCall(config=config)
    endpoint = '/aci/{org_id}/vulnerability_intelligence/cves'+'/{id}'.format(id=params.pop('id'))
    response = MK.make_request(endpoint=endpoint, method="GET", params=params)
    return response


def get_vulnerability_intelligence_vulnerable_products(config: dict, params: dict) -> dict:
    MK = MakeRestApiCall(config=config)
    input_src_type = params.get("input_src_type")
    if input_src_type:
        params["input_src_type"] = INPUT_SRC_TYPE_MAPPING.get(input_src_type)

    sort = params.get("sort")
    if sort:
        params["sort"] = SORTING_OPTION_PRODUCT_MAPPING.get(sort)
    endpoint = '/aci/{org_id}/vulnerability_intelligence/products'
    response = MK.make_request(endpoint=endpoint, method="GET", params=params)
    return response


def get_vulnerability_intelligence_vulnerable_vendors(config: dict, params: dict) -> dict:
    MK = MakeRestApiCall(config=config)
    input_src_type = params.get("input_src_type")
    if input_src_type:
        params["input_src_type"] = INPUT_SRC_TYPE_MAPPING.get(input_src_type)

    sort = params.get("sort")
    if sort:
        params["sort"] = SORTING_OPTION_VENDOR_MAPPING.get(sort)
    endpoint = '/aci/{org_id}/vulnerability_intelligence/vendors'
    response = MK.make_request(endpoint=endpoint, method="GET", params=params)
    return response
